{"version":3,"sources":["shared/context/auth-context.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Backdrop.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","shared/hooks/auth-hook.js","App.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","LoadingSpinner","props","className","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","MainHeader","children","NavLinks","auth","useContext","to","exact","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","logoutTimer","useState","isDrawerOpen","setisDrawerOpen","closeDrawerHandler","Fragment","Users","React","lazy","NewPlace","UpdatePlace","UserPlaces","Auth","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","useCallback","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","value","fallback","render"],"mappings":"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","file":"static/js/main.94ec4371.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const AuthContext = createContext({\r\n    isLoggedIn: false,\r\n    userId: null,\r\n    token: null,\r\n    login: () => {},\r\n    logout: () => {}\r\n});","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import React from 'react';\r\n\r\nimport './MainHeader.css';\r\n\r\nfunction MainHeader(props) {\r\n    return <header className=\"main-header\">\r\n        {/* props.children means anything parsed between opening and closing */}\r\n        {props.children}\r\n    </header>\r\n}\r\n\r\nexport default MainHeader;","import React, { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../../context/auth-context';\r\nimport './NavLinks.css';\r\n\r\nfunction NavLinks(props) {\r\n    const auth = useContext(AuthContext);\r\n\r\n    return (\r\n        <ul className=\"nav-links\">\r\n            <li>\r\n                <NavLink to=\"/\" exact>\r\n                    {\" \"}\r\n                    All Users{\" \"}\r\n                </NavLink>\r\n            </li>\r\n\r\n            {auth.isLoggedIn && (\r\n                <li>\r\n                    <NavLink to={`/${auth.userId}/places`}> My Places </NavLink>\r\n                </li>\r\n            )}\r\n\r\n            {auth.isLoggedIn && (\r\n                <li>\r\n                    <NavLink to=\"/places/new\"> Add Places </NavLink>\r\n                </li>\r\n            )}\r\n\r\n            {!auth.isLoggedIn && (\r\n                <li>\r\n                    <NavLink to=\"/auth\"> Authenticate </NavLink>\r\n                </li>\r\n            )}\r\n\r\n            {auth.isLoggedIn && (\r\n                <li>\r\n                    <button onClick={auth.logout}> Logout </button>\r\n                </li>\r\n            )}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default NavLinks;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport './SideDrawer.css';\r\n\r\nfunction SideDrawer(props) {\r\n    const content = (\r\n        <CSSTransition\r\n            in={props.show}\r\n            timeout={200}\r\n            classNames=\"slide-in-left\"\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\r\n        </CSSTransition>\r\n    );\r\n    \r\n    return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\r\n}\r\n\r\nexport default SideDrawer;","import React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport MainHeader from './MainHeader.js';\r\nimport NavLinks from './NavLinks.js';\r\nimport './MainNavigation.css';\r\nimport SideDrawer from './SideDrawer.js';\r\nimport Backdrop from '../UIElements/Backdrop.js';\r\n\r\nfunction MainNavigation(props) {\r\n    const [isDrawerOpen, setisDrawerOpen] = useState(false);\r\n\r\n    function openDrawerHandler() {\r\n        setisDrawerOpen(true); \r\n    }\r\n\r\n    function closeDrawerHandler() {\r\n        setisDrawerOpen(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isDrawerOpen ? <Backdrop onClick={closeDrawerHandler}/> : null}\r\n            \r\n            <SideDrawer show={isDrawerOpen} onClick={closeDrawerHandler}>\r\n                <nav className=\"main-navigation__drawer-nav\">\r\n                    <NavLinks />\r\n                </nav>\r\n            </SideDrawer>\r\n\r\n            <MainHeader>\r\n                <button\r\n                    className=\"main-navigation__menu-btn\"\r\n                    onClick={openDrawerHandler}\r\n                >\r\n                    {/*hamburger icon*/}\r\n                    <span />\r\n                    <span />\r\n                    <span />\r\n                </button>\r\n\r\n                <h1 className=\"main-navigation__title\">\r\n                    <Link to=\"/\">Your Places</Link>\r\n                </h1>\r\n\r\n                <nav className=\"main-navigation__header-nav\">\r\n                    <NavLinks />\r\n                </nav>\r\n            </MainHeader>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default MainNavigation;","import {useState, useCallback, useEffect} from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => { \r\n  const [token, setToken] = useState(null);\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\r\n  const [userId, setUserId] = useState(null);\r\n\r\n  const login = useCallback((uid, token, expirationDate) => {\r\n    setUserId(uid);\r\n    \r\n    //either we already have one, or we create a new one\r\n    const tokenExpirationDate = \r\n      expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); //plus 1h\r\n    setTokenExpirationDate(tokenExpirationDate);\r\n    localStorage.setItem(\r\n        \"userData\",\r\n        JSON.stringify({\r\n            userId: uid,\r\n            token: token,\r\n            expiration: tokenExpirationDate.toISOString(), //special toString => can be converted back to date\r\n        })\r\n    );\r\n    setToken(token);\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setUserId(null);\r\n    setToken(null);\r\n    setTokenExpirationDate(null);\r\n    localStorage.removeItem(\"userData\");\r\n  }, []);\r\n  \r\n  //auto logouts\r\n  useEffect(() => {\r\n    if (token && tokenExpirationDate) {\r\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n      //remainingTime calculated to be in miliseconds\r\n      logoutTimer = setTimeout(logout, remainingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [token, logout, tokenExpirationDate]);\r\n\r\n  //auto logins\r\n  useEffect(() => {\r\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    if (\r\n        storedData &&\r\n        storedData.token &&\r\n        new Date(storedData.expiration) > new Date()\r\n    ) {\r\n        login(storedData.userId, storedData.token, new Date(storedData.expiration));\r\n    }\r\n  }, [login]); //ensure this runs once\r\n  //useEffect wrapped functions run after renders\r\n\r\n  return { token, userId, login, logout };\r\n}","import React, { Suspense } from \"react\";\nimport { BrowserRouter as Router, Route, Redirect, Switch} from 'react-router-dom';\n\n//OLD eager imports\n//import Users from \"./users/pages/Users.js\";\n//import NewPlace from \"./places/pages/NewPlace.js\";\n//import UpdatePlace from \"./places/pages/UpdatePlace.js\";\nimport MainNavigation from \"./shared/components/Navigation/MainNavigation\";\n//import UserPlaces from \"./places/pages/UserPlaces\";\n//import Auth from \"./users/pages/Auth.js\";\nimport { AuthContext } from \"./shared/context/auth-context\";\nimport { useAuth } from \"./shared/hooks/auth-hook\";\nimport LoadingSpinner from \"./shared/components/UIElements/LoadingSpinner\";\n\n//NEW lazy imports\nconst Users = React.lazy(() => import(\"./users/pages/Users.js\"));\nconst NewPlace = React.lazy(() => import(\"./places/pages/NewPlace.js\"));\nconst UpdatePlace = React.lazy(() => import(\"./places/pages/UpdatePlace.js\"));\nconst UserPlaces = React.lazy(() => import(\"./places/pages/UserPlaces\"));\nconst Auth = React.lazy(() => import( \"./users/pages/Auth.js\"));\n\n\n//only for tracking auto logouts\n//let logoutTimer;\nfunction App() {\n  const { token, userId, login, logout } = useAuth();\n  /* ABSTRACTED TO CUSTOM HOOK\n  const [token, setToken] = useState(null);\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\n  const [userId, setUserId] = useState(null);\n\n  const login = useCallback((uid, token, expirationDate) => {\n    setUserId(uid);\n    \n    //either we already have one, or we create a new one\n    const tokenExpirationDate = \n      expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); //plus 1h\n    setTokenExpirationDate(tokenExpirationDate);\n    localStorage.setItem(\n        \"userData\",\n        JSON.stringify({\n            userId: uid,\n            token: token,\n            expiration: tokenExpirationDate.toISOString(), //special toString => can be converted back to date\n        })\n    );\n    setToken(token);\n  }, []);\n\n  const logout = useCallback(() => {\n    setUserId(null);\n    setToken(null);\n    setTokenExpirationDate(null);\n    localStorage.removeItem(\"userData\");\n  }, []);\n  \n  //auto logouts\n  useEffect(() => {\n    if (token && tokenExpirationDate) {\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n      //remainingTime calculated to be in miliseconds\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n\n  //auto logins\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\n    if (\n        storedData &&\n        storedData.token &&\n        new Date(storedData.expiration) > new Date()\n    ) {\n        login(storedData.userId, storedData.token, new Date(storedData.expiration));\n    }\n  }, [login]); //ensure this runs once\n  //useEffect wrapped functions run after renders\n\n  */\n  let routes;\n\n  if (token) {\n    // path is the url path, exact means only that path will render this thing\n    // paths can stack (one with exact for only the page one without exact to load all the time)\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact={true}>\n          <Users />\n        </Route>\n\n        <Route path=\"/:userId/places\">\n          <UserPlaces />\n        </Route>\n\n        <Route path=\"/places/new\">\n          <NewPlace />\n        </Route>\n\n        {/* generic routes must be placed after the more specific ones */}\n        <Route path=\"/places/:placeId\">\n          <UpdatePlace />\n        </Route>\n\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact={true}>\n          <Users />\n        </Route>\n\n        <Route path=\"/:userId/places\">\n          <UserPlaces />\n        </Route>\n\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n\n        <Redirect to=\"/auth\" />\n      </Switch>\n    );\n  }\n\n\n  //AuthContext re-binds the variables defined in authcontext.js so that app-wide can modify\n  return (\n      <AuthContext.Provider\n          value={{\n              userId: userId,\n              isLoggedIn: !!token,\n              token: token, // for convenience\n              login: login,\n              logout: logout,\n          }}\n      >\n          <Router>\n              {/*Router must always come first*/}\n              <MainNavigation />\n              <main>\n                {/*Suspense required to make React Lazy work*/}\n                {/* fallback param loads when loading actual takes longer*/}\n                  <Suspense\n                      fallback={\n                          <div className=\"center\">\n                              <LoadingSpinner />\n                          </div>\n                      }\n                  >\n                    {routes}\n                  </Suspense>\n              </main>\n          </Router>\n      </AuthContext.Provider>\n  );}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}